{"ast":null,"code":"const https = require('https');\n\nmodule.exports = (req, res) => {\n  const API_KEY = process.env.SHAREDCOUNT_API_KEY; // const { query: { url } } = req\n\n  https.get(`https://api.sharedcount.com/v1.0/?apikey=${API_KEY}&url=${url}`, res => {\n    let data = ''; // A chunk of data has been recieved.\n\n    res.on('data', chunk => {\n      data += chunk;\n    }); // The whole response has been received. Print out the result.\n\n    res.on('end', () => {\n      console.log(JSON.parse(data));\n    });\n  }).on(\"error\", err => {\n    console.log(\"Error: \" + err.message);\n  });\n  res.status(200).json({\n    shares\n  });\n};","map":{"version":3,"sources":["/Users/didier/Projects/digest/src/pages/api/shares.js"],"names":["https","require","module","exports","req","res","API_KEY","process","env","SHAREDCOUNT_API_KEY","get","url","data","on","chunk","console","log","JSON","parse","err","message","status","json","shares"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC7B,QAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,mBAA5B,CAD6B,CAG7B;;AAEAT,EAAAA,KAAK,CAACU,GAAN,CAAW,4CAA2CJ,OAAQ,QAAOK,GAAI,EAAzE,EAA6EN,GAAD,IAAS;AACnF,QAAIO,IAAI,GAAG,EAAX,CADmF,CAGnF;;AACAP,IAAAA,GAAG,CAACQ,EAAJ,CAAO,MAAP,EAAgBC,KAAD,IAAW;AACxBF,MAAAA,IAAI,IAAIE,KAAR;AACD,KAFD,EAJmF,CAQnF;;AACAT,IAAAA,GAAG,CAACQ,EAAJ,CAAO,KAAP,EAAc,MAAM;AAClBE,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,KAAL,CAAWN,IAAX,CAAZ;AACD,KAFD;AAID,GAbD,EAaGC,EAbH,CAaM,OAbN,EAagBM,GAAD,IAAS;AACtBJ,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYG,GAAG,CAACC,OAA5B;AACD,GAfD;AAgBAf,EAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA;AAAF,GAArB;AACD,CAtBD","sourcesContent":["const https = require('https');\n\nmodule.exports = (req, res) => {\n  const API_KEY = process.env.SHAREDCOUNT_API_KEY\n\n  // const { query: { url } } = req\n\n  https.get(`https://api.sharedcount.com/v1.0/?apikey=${API_KEY}&url=${url}`, (res) => {\n    let data = '';\n\n    // A chunk of data has been recieved.\n    res.on('data', (chunk) => {\n      data += chunk;\n    });\n\n    // The whole response has been received. Print out the result.\n    res.on('end', () => {\n      console.log(JSON.parse(data));\n    });\n\n  }).on(\"error\", (err) => {\n    console.log(\"Error: \" + err.message);\n  });\n  res.status(200).json({ shares })\n}\n"]},"metadata":{},"sourceType":"script"}